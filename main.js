//! Revisi√≥n Mayo 2025
/* Hola Pedro,

Te comento r√°pido sobre el proyecto. La verdad es que veo buena iniciativa, y eso est√° genial, pero tambi√©n noto bastante confusi√≥n con varios conceptos. Parece que est√°s sobrepensando algunas cosas y mezclando otras, y eso te est√° complicando mucho‚Ä¶

En algunos casos podr√≠a dejar pasar ciertos fallos, pero en tu caso necesito que entiendas bien lo que est√°s haciendo y que lo mejores antes de seguir avanzando en el curso.

!El Responsive

Uno de los requisitos clave era que la p√°gina fuera responsive, como continuaci√≥n del trabajo anterior en HTML y CSS. Pero ahora mismo no lo es para nada.
Tus ‚Äúcolumnas‚Äù no est√°n bien planteadas y, cuando vi el resto del c√≥digo, me qued√≥ claro que hay una confusi√≥n importante. Esta parte no est√° funcionando correctamente.

!Peticiones

Funcionalmente, las peticiones se hacen, pintas los resultados y los gatitos si no hay nada, lo cual est√° bien. Pero‚Ä¶ al abrir la consola, aparecen muchas peticiones innecesarias. Eso es un problema grave: hacer peticiones que consumen recursos del usuario sin usar sus resultados, no es lo m√°s √≥ptimo.
M√°s abajo te muestro ejemplos y capturas. Esto tienes que arreglarlo s√≠ o s√≠.

!Tu Componente Card.js

Aqu√≠ es donde m√°s me preocup√©. En el main, haces c√°lculos con el tama√±o de pantalla para decidir el n√∫mero de columnas, lo guardas, y luego intentas pintar en cada columna seg√∫n eso‚Ä¶ Es demasiado complicado para algo que deber√≠a ser mucho m√°s sencillo.
No necesitas calcular nada antes seg√∫n el ancho de pantalla.

El flujo deber√≠a ser:

Hacer la petici√≥n.
Recibir los datos.
Iterar sobre esos datos y pintarlos con una funci√≥n que genera el HTML de cada carta.
Para eso, ya tienes CSS Grid que te organiza las columnas autom√°ticamente seg√∫n el tama√±o de la pantalla.

!Recomendaciones
Borra esa l√≥gica compleja de columnas.
Crea una funci√≥n reutilizable que reciba los datos de una imagen y genere su HTML.
Cuando tengas los datos, simplemente iteras y pintas con esa funci√≥n.
Seguro que cuando lo veas desde otra perspectiva lo vas a arreglar r√°pido. Esto te va a ayudar much√≠simo para lo que viene en el curso.
Mucho √°nimo, te leemos pronto!

!Notas
La p√°gina no es responsive.
Est√°s cumpliendo bien con mostrar mensajes y gatitos cuando no hay resultados, pero el uso de alert no es buena pr√°ctica. Corta la ejecuci√≥n y no se ve bien. Usa un modal o un mensaje en el DOM.
Al abrir la p√°gina, aparece este error:
initialError
initialError
608√ó125 3.24 KB
El primer fetch lanza 5 peticiones, algunas con queries diferentes como dog, man, person:
initalFetch
initalFetch
949√ó426 107 KB
Si buscas algo como wood, tambi√©n lanza peticiones extra (man, person) que no corresponden. Esto ocurre en las l√≠neas 106 y 107. Rev√≠salo.
Mejora la legibilidad del c√≥digo, no tienes apenas saltos de l√≠nea, y eso hace muy tedioso seguir la l√≥gica. Agr√∫palo visualmente mejor.
El archivo Card.js tiene 421 l√≠neas con bucles complejos y l√≥gica que no necesitas. No es escalable ni reutilizable.
!Puntos positivos
Usas bien los template literals en varias partes. Me sorprende que luego no los uses de forma m√°s clara en Card.js‚Ä¶
La estructura general de carpetas y archivos est√° bien pensada, con componentes y sus estilos separados. Aun as√≠, podr√≠as dividir m√°s: separar l√≥gica de peticiones, pintado, etc.
!Mejoras opcionales
El font podr√≠a tener m√°s personalidad, y podr√≠as trabajar un poco m√°s los detalles: outline en el focus, tama√±os de √≠conos, etc‚Ä¶ */


import './style.css';
import { createButton } from './src/components/button/button';
import { createCards } from './src/components/card/Card';
import { createColumns } from './src/components/cardContainers/cardContainer';
export let windowWidth = (window.innerWidth / 2.3);
export { numberOfColumns, imagesListPerson };
let numberOfColumns = 2;

const divApp = document.querySelector("#app");
divApp.innerHTML =
  `<header>
  <div class="headerContainer">
    <img class="iconePinterest" src="./assets/pinterest_logo.png" alt="pinterest">
    <div class="desktopHeader">
        ${createButton({ texto: "Inicio", size: "s", classInfo: `desktopButton initial` })}
        ${createButton({ texto: "Explorar", size: "s", classInfo: `desktopButton` })}
        ${createButton({ texto: "Crear", size: "s", classInfo: `desktopButton` })}
      </div>
    <div class="headerSearchContainer">
      <span class="icon">üîç</span>
      <input class="inputInfo" id="word" type="text" placeholder=" Buscar...">
    </div>
        <img class="desktopIconCampana iconePinterest" src="./assets/campana.png" alt="campana">
        <img class="desktopIconComments iconePinterest" src="./assets/comentarios.png" alt="comentarios">
    ${createButton({ texto: "D", size: "s", classInfo: "upRightButton" })}
  </div>
</header> 
<div class="myDiv"></div>
<main> 
<div class="mainContainerCards2"></div> 
</main>`;
createColumns()
const accesKey = 'ulcAHukAVcmsmE3YQCJcVOoI_rtjQjdVJzrx7QnswEI';
const endPoint = 'https://api.unsplash.com/search/photos';
let imagesList = {}
async function getImages(query) {
  let response = await fetch(endPoint + '?query=' + query + '&client_id=' + accesKey);
  let jsonResponse = await response.json();
  imagesList = await jsonResponse.results;
  if (imagesList.length === 0) {
    getImages('gatos');
    alert("¬°Busqueda err√≥nea!, por favor intentalo con palabras como gato, perro...");
    getImagesPerson('man');
    getImagesPerson('person');
  }
  else {
    createCards(imagesList);
    getImagesPerson('man');
    getImagesPerson('person');
  }
}
getImages('dog');
let firstWord = 'nada de nada';
document.getElementById('word').addEventListener('keydown', function (event) {
  if (event.key === 'Enter') {
    const valorInput = event.target.value;
    console.log(firstWord);
    if (firstWord === 'nada de nada') {
      firstWord = event.target.value;
      console.log(firstWord);
    }
    console.log(firstWord);
    getImages(`${valorInput}`);
    event.target.value = '';
  }
});
document.querySelector(`.iconePinterest`).onclick = function () {
  if (firstWord === 'nada de nada') {
    getImages('cat');
  }
  else {
    getImages(firstWord)
  };
};
let imagesListP = []
const imagesListPerson = []
async function getImagesPerson(queryPerson) {
  let response = await fetch(endPoint + '?query=' + queryPerson + '&client_id=' + accesKey);
  let jsonResponse = await response.json();
  let imagesListPersonA = await jsonResponse.results;
  imagesListP = await jsonResponse.results;
  if (queryPerson === 'person') {
    for (let k = 0; k < 4; k++) {
      const element = document.getElementById(`miImagenCanvas${k}`);
      element.src = imagesListPersonA[0].urls.small;
      const elementName = document.querySelector(`.cardPUser${k}`);
      elementName.innerText = imagesListPersonA[8].user.first_name + " " + imagesListPersonA[0].user.last_name;
    }
  } else {
    for (let k = 4; k < 10; k++) {
      const element = document.getElementById(`miImagenCanvas${k}`);
      element.src = imagesListPersonA[0].urls.small;
      const elementName = document.querySelector(`.cardPUser${k}`);
      elementName.innerText = imagesListPersonA[0].user.first_name + " " + imagesListPersonA[0].user.last_name;
    }
  }
  return imagesListPersonA
}
getImagesPerson('man');
getImagesPerson('person');